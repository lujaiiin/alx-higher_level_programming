Import module:
    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Correct:
    >>> l = BaseGeometry()
    >>> type(l) == BaseGeometry
    True

area:
    >>> type(BaseGeometry.__dict__['area'])
    <class 'function'>

area args:
    >>> l.__class__.area()
    Traceback (most recent call last):
    TypeError: area() missing 1 required positional argument: 'self'

area (1 arg):
    >>> l.area(10)
    Traceback (most recent call last):
    TypeError: area() takes 1 positional argument but 2 were given

area test:
    >>> l.area()
    Traceback (most recent call last):
    Exception: area() is not implemented

integer_method:
    >>> type(BaseGeometry.__dict__['integer_validator'])
    <class 'function'>

integer_args:
    >>> l.__class__.integer_validator()
    Traceback (most recent call last):
    TypeError: integer_validator() missing 3 required positional arguments: 'self', 'name', and 'value'

integer_(0 args):
    >>> l.integer_validator()
    Traceback (most recent call last):
    TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'
    
integer_:
    >>> l.integer_validator(1, 1, 1)
    Traceback (most recent call last):
    TypeError: integer_validator() takes 3 positional arguments but 4 were given

integervalue:
    >>> l.integer_validator("foo", 3.0)
    Traceback (most recent call last):
    TypeError: foo must be an integer

intege value:
    >>> l.integer_validator("arg", 3.14)
    Traceback (most recent call last):
    TypeError: arg must be an integer

integer_vvalue:
    >>> l.integer_validator("Bar", "bar")
    Traceback (most recent call last):
    TypeError: Bar must be an integer

integer_validator value:
    >>> l.integer_validator("zar", True)
    Traceback (most recent call last):
    TypeError: zar must be an integer

integer list value:
    >>> l.integer_validator("a", [1])
    Traceback (most recent call last):
    TypeError: a must be an integer

integer None value:
    >>> l.integer_validator("foo", None)
    Traceback (most recent call last):
    TypeError: foo must be an integer

integer_0 value:
    >>> l.integer_validator("key", 0)
    Traceback (most recent call last):
    ValueError: key must be greater than 0

integer_validator value:
    >>> l.integer_validator("key", -1000)
    Traceback (most recent call last):
    ValueError: key must be greater than 0

integer_ok value:
    >>> l.integer_validator("key", 98)
    
integer_value 2:
    >>> l.integer_validator("key", 1)

integer_empty string:
    >>> l.integer_validator("", 1)

integer_validator method ing:
    >>> l.integer_validator(None, 1)

integer_tuple:
    >>> l.integer_validator("Foo", (1, 2))
    Traceback (most recent call last):
    TypeError: Foo must be an integer

integer_dic:
    >>> l.integer_validator("Foo", {1, 2})
    Traceback (most recent call last):
    TypeError: Foo must be an integer
